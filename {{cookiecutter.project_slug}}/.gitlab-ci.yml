# Activando Ideas Community GitLab Configuration

# Test enviroment
test:
  stage: test
  image: python:3.7-alpine3.9
  script:
    # Install dependencies
    - apk add --no-cache postgresql-libs && \
    - apk add --no-cache --virtual .build-deps gcc musl-dev postgresql-dev && \
    - apk add --no-cache zlib-dev jpeg-dev libjpeg
    # Update pip
    - python -m pip install --upgrade pip
    # Add Development requirements
    - python3 -m pip install -r core/requirements/development.txt
    # Add Production requirements
    - python3 -m pip install -r requirements.txt --no-cache-dir && \
    - apk --purge del .build-deps
    # Set config app
    - python core/enviroments/config.py testing
    # Make migrations
    - python manage.py migrate
    # Run all app tests
    - coverage run manage.py test
    # Get coverage app
    - coverage report
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'

# Staging enviroment
staging:
  stage: deploy
  image: python:3.7-alpine3.9
  environment: staging
  only:
    - staging
  script:
    # Install postgresql
    - apk add --no-cache postgresql-libs && \
    - apk add --no-cache --virtual .build-deps gcc musl-dev postgresql-dev && \
    # Add Pillow requirements
    - apk add --no-cache zlib-dev jpeg-dev libjpeg
    # Install requirements
    - python3 -m pip install -r requirements.txt --no-cache-dir && \
    # Purge
    - apk --purge del .build-deps
    - pip install --upgrade pip
    # Set enviroments DB
    - python core/enviroments/build.py $HOST $STAGING_DATABASE $USER $PASSWORD $STAGING_DOMAIN $APP_KEY $FRONTEND_APP $PRODUCTION_DOMAIN $STAGING_DOMAIN $STAGING_BUCKED $STAGING_PROJECT_ID $STAGING_SERVICE_ACCOUNT_KEY $PASSWORD_FOR_TESTING

    # Add static files
    - python core/enviroments/config.py testing
    # Set config app
    - python manage.py collectstatic
    - python core/enviroments/config.py staging
    # Install CA certs, openssl to https downloads, python for gcloud sdk
    - apk add --update make ca-certificates openssl python
    - update-ca-certificates
    # Add media folder
    - mkdir core/media
    # Download and install Google Cloud SDK
    - wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
    - tar zxvf google-cloud-sdk.tar.gz && ./google-cloud-sdk/install.sh --quiet --usage-reporting=false --path-update=true
    - PATH="google-cloud-sdk/bin:${PATH}"
    - gcloud components update
    # Deploy
    - gcloud auth activate-service-account --key-file $STAGING_SERVICE_ACCOUNT_KEY
    - gcloud --quiet --project $STAGING_PROJECT_ID app deploy app.yaml
  dependencies:
    - test

# Production enviroment
production:
  stage: deploy
  image: python:3.7-alpine3.9
  environment: production
  only:
    - master
  script:
    # Install postgresql
    - apk add --no-cache postgresql-libs && \
    - apk add --no-cache --virtual .build-deps gcc musl-dev postgresql-dev && \
    # Add Pillow requirements
    - apk add --no-cache zlib-dev jpeg-dev libjpeg
    # Install requirements
    - python3 -m pip install -r requirements.txt --no-cache-dir && \
    # Purge
    - apk --purge del .build-deps
    # Set enviroments DB
    - python core/enviroments/build.py $HOST $DATABASE $USER $PASSWORD $PRODUCTION_DOMAIN $APP_KEY $FRONTEND_APP $PRODUCTION_DOMAIN $STAGING_DOMAIN $PRODUCTION_BUCKED $PROJECT_ID $SERVICE_ACCOUNT_KEY $PASSWORD_FOR_TESTING
    # Add static files
    - python core/enviroments/config.py testing
    # Set config app
    - python manage.py collectstatic
    - python core/enviroments/config.py production
    # Install CA certs, openssl to https downloads, python for gcloud sdk
    - apk add --update make ca-certificates openssl python
    - update-ca-certificates
    # Add media folder
    - mkdir core/media

    # Download and install Google Cloud SDK
    - wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
    - tar zxvf google-cloud-sdk.tar.gz && ./google-cloud-sdk/install.sh --quiet --usage-reporting=false --path-update=true
    - PATH="google-cloud-sdk/bin:${PATH}"
    - gcloud components update
    # Deploy
    - gcloud auth activate-service-account --key-file $SERVICE_ACCOUNT_KEY
    - gcloud --quiet --project $PROJECT_ID app deploy app.yaml
  dependencies:
    - test

# Gitlab modules
include:
  - template: Code-Quality.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml
  - template: Secret-Detection.gitlab-ci.yml
  - template: DAST.gitlab-ci.yml